{"http_interactions":[{"request":{"method":"get","uri":"https://api.stackexchange.com/2.0/tags?key=<STACKAPPS_API_KEY>&pagesize=99&site=stackoverflow&sort=popular","body":{"encoding":"US-ASCII","string":""},"headers":{"Accept-Encoding":["gzip;q=1.0,deflate;q=0.6,identity;q=0.3"],"Accept":["*/*"],"User-Agent":["Ruby"]}},"response":{"status":{"code":200,"message":"OK"},"headers":{"Cache-Control":["private"],"Content-Type":["application/json; charset=utf-8"],"Access-Control-Allow-Origin":["*"],"Access-Control-Allow-Methods":["GET, POST"],"Access-Control-Allow-Credentials":["false"],"Date":["Thu, 03 Jul 2014 13:31:38 GMT"],"Content-Length":["1235"]},"body":{"encoding":"ASCII-8BIT","string":"ï»¿{\"items\":[{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":668745,\"name\":\"java\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":663368,\"name\":\"c#\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":646681,\"name\":\"javascript\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":603586,\"name\":\"php\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":531889,\"name\":\"android\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":501329,\"name\":\"jquery\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":317073,\"name\":\"python\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":314570,\"name\":\"html\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":300294,\"name\":\"c++\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":256935,\"name\":\"mysql\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":250483,\"name\":\"ios\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":232452,\"name\":\"css\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":226054,\"name\":\"asp.net\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":222995,\"name\":\"sql\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":194134,\"name\":\"iphone\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":191264,\"name\":\"objective-c\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":189251,\"name\":\".net\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":169130,\"name\":\"ruby-on-rails\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":145095,\"name\":\"c\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":108575,\"name\":\"ruby\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":102532,\"name\":\"sql-server\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":95916,\"name\":\"ajax\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":95553,\"name\":\"arrays\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":94056,\"name\":\"xml\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":92403,\"name\":\"regex\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":89051,\"name\":\"asp.net-mvc\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":86790,\"name\":\"wpf\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":83149,\"name\":\"json\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":79918,\"name\":\"linux\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":77600,\"name\":\"database\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":76778,\"name\":\"django\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":70087,\"name\":\"vb.net\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":68905,\"name\":\"eclipse\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":67109,\"name\":\"windows\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":65176,\"name\":\"xcode\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":61198,\"name\":\"string\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":61129,\"name\":\"r\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":58561,\"name\":\"html5\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":58207,\"name\":\"facebook\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":56075,\"name\":\"multithreading\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":54442,\"name\":\"wordpress\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":51392,\"name\":\"ruby-on-rails-3\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":50830,\"name\":\"image\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":50314,\"name\":\"winforms\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":50237,\"name\":\"node.js\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":47622,\"name\":\"excel\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":47516,\"name\":\"forms\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":46880,\"name\":\"spring\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":44704,\"name\":\"osx\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":44056,\"name\":\"performance\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":43646,\"name\":\"oracle\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":43284,\"name\":\"swing\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":42925,\"name\":\"angularjs\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":42775,\"name\":\"git\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":42680,\"name\":\"algorithm\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":42084,\"name\":\"visual-studio-2010\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":40850,\"name\":\"linq\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":40543,\"name\":\"apache\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":38613,\"name\":\"web-services\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":38493,\"name\":\"bash\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":38452,\"name\":\"perl\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":38233,\"name\":\"entity-framework\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":37595,\"name\":\"asp.net-mvc-3\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":37377,\"name\":\"wcf\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":36406,\"name\":\"visual-studio\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":36291,\"name\":\"sql-server-2008\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":35917,\"name\":\"hibernate\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":34883,\"name\":\"matlab\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":33868,\"name\":\"actionscript-3\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":32551,\"name\":\"qt\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":32525,\"name\":\"list\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":31878,\"name\":\".htaccess\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":31757,\"name\":\"sqlite\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":31260,\"name\":\"file\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":30968,\"name\":\"mongodb\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":30408,\"name\":\"ipad\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":30221,\"name\":\"css3\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":30178,\"name\":\"api\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":29981,\"name\":\"function\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":29894,\"name\":\"cocoa-touch\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":29822,\"name\":\"cocoa\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":29639,\"name\":\"codeigniter\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":29441,\"name\":\"flash\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":29278,\"name\":\"vba\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":28899,\"name\":\"class\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":28558,\"name\":\"jquery-ui\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":28502,\"name\":\"postgresql\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":28217,\"name\":\"google-maps\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":27847,\"name\":\"tsql\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":27774,\"name\":\"jsp\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":27651,\"name\":\"shell\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":27406,\"name\":\"security\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":27193,\"name\":\"delphi\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":26986,\"name\":\"scala\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":26621,\"name\":\"sockets\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":26599,\"name\":\"twitter-bootstrap\"},{\"has_synonyms\":false,\"is_moderator_only\":false,\"is_required\":false,\"count\":26476,\"name\":\"silverlight\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":26378,\"name\":\"validation\"},{\"has_synonyms\":true,\"is_moderator_only\":false,\"is_required\":false,\"count\":26341,\"name\":\"google-app-engine\"}],\"has_more\":true,\"quota_max\":10000,\"quota_remaining\":9754}"},"http_version":null},"recorded_at":"Thu, 31 Dec 2009 13:00:01 GMT"},{"request":{"method":"get","uri":"https://api.stackexchange.com/2.0/questions?filter=withbody&key=<STACKAPPS_API_KEY>&pagesize=11&site=stackoverflow&sort=votes","body":{"encoding":"US-ASCII","string":""},"headers":{"Accept-Encoding":["gzip;q=1.0,deflate;q=0.6,identity;q=0.3"],"Accept":["*/*"],"User-Agent":["Ruby"]}},"response":{"status":{"code":200,"message":"OK"},"headers":{"Cache-Control":["private"],"Content-Type":["application/json; charset=utf-8"],"Access-Control-Allow-Origin":["*"],"Access-Control-Allow-Methods":["GET, POST"],"Access-Control-Allow-Credentials":["false"],"Date":["Thu, 03 Jul 2014 13:31:39 GMT"],"Content-Length":["6312"]},"body":{"encoding":"ASCII-8BIT","string":"ï»¿{\"items\":[{\"tags\":[\"java\",\"c++\",\"performance\",\"optimization\",\"branch-prediction\"],\"owner\":{\"reputation\":153171,\"user_id\":87234,\"user_type\":\"registered\",\"accept_rate\":94,\"profile_image\":\"http://i.stack.imgur.com/FkjBe.png?s=128&g=1\",\"display_name\":\"GManNickG\",\"link\":\"http://stackoverflow.com/users/87234/gmannickg\"},\"is_answered\":true,\"view_count\":449305,\"protected_date\":1399067470,\"accepted_answer_id\":11227902,\"answer_count\":9,\"score\":8132,\"last_activity_date\":1404195421,\"creation_date\":1340805096,\"last_edit_date\":1390885119,\"question_id\":11227809,\"link\":\"http://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-an-unsorted-array\",\"title\":\"Why is processing a sorted array faster than an unsorted array?\",\"body\":\"<p>Here is a piece of C++ code that seems very peculiar. For some strange reason, sorting the data miraculously makes the code almost six times faster:</p>\\n\\n<pre class=\\\"lang-cpp prettyprint-override\\\"><code>#include &lt;algorithm&gt;\\n#include &lt;ctime&gt;\\n#include &lt;iostream&gt;\\n\\nint main()\\n{\\n    // Generate data\\n    const unsigned arraySize = 32768;\\n    int data[arraySize];\\n\\n    for (unsigned c = 0; c &lt; arraySize; ++c)\\n        data[c] = std::rand() % 256;\\n\\n    // !!! With this, the next loop runs faster\\n    std::sort(data, data + arraySize);\\n\\n    // Test\\n    clock_t start = clock();\\n    long long sum = 0;\\n\\n    for (unsigned i = 0; i &lt; 100000; ++i)\\n    {\\n        // Primary loop\\n        for (unsigned c = 0; c &lt; arraySize; ++c)\\n        {\\n            if (data[c] &gt;= 128)\\n                sum += data[c];\\n        }\\n    }\\n\\n    double elapsedTime = static_cast&lt;double&gt;(clock() - start) / CLOCKS_PER_SEC;\\n\\n    std::cout &lt;&lt; elapsedTime &lt;&lt; std::endl;\\n    std::cout &lt;&lt; \\\"sum = \\\" &lt;&lt; sum &lt;&lt; std::endl;\\n}\\n</code></pre>\\n\\n<ul>\\n<li>Without <code>std::sort(data, data + arraySize);</code>, the code runs in <strong>11.54</strong> seconds.</li>\\n<li>With the sorted data, the code runs in <strong>1.93</strong> seconds.</li>\\n</ul>\\n\\n<hr>\\n\\n<p>Initially, I thought this might be just a language or compiler anomaly. So I tried it in Java:</p>\\n\\n<pre class=\\\"lang-java prettyprint-override\\\"><code>import java.util.Arrays;\\nimport java.util.Random;\\n\\npublic class Main\\n{\\n    public static void main(String[] args)\\n    {\\n        // Generate data\\n        int arraySize = 32768;\\n        int data[] = new int[arraySize];\\n\\n        Random rnd = new Random(0);\\n        for (int c = 0; c &lt; arraySize; ++c)\\n            data[c] = rnd.nextInt() % 256;\\n\\n        // !!! With this, the next loop runs faster\\n        Arrays.sort(data);\\n\\n        // Test\\n        long start = System.nanoTime();\\n        long sum = 0;\\n\\n        for (int i = 0; i &lt; 100000; ++i)\\n        {\\n            // Primary loop\\n            for (int c = 0; c &lt; arraySize; ++c)\\n            {\\n                if (data[c] &gt;= 128)\\n                    sum += data[c];\\n            }\\n        }\\n\\n        System.out.println((System.nanoTime() - start) / 1000000000.0);\\n        System.out.println(\\\"sum = \\\" + sum);\\n    }\\n}\\n</code></pre>\\n\\n<p>With a somewhat similar, but less extreme result.</p>\\n\\n<hr>\\n\\n<p>My first thought was that sorting brings the data into the cache, but my next thought was how silly that is, because the array was just generated.</p>\\n\\n<ul>\\n<li>What is going on? </li>\\n<li>Why is a sorted array faster than an unsorted array? </li>\\n<li>The code is summing up some independent terms, and the order should not matter. </li>\\n</ul>\\n\"},{\"tags\":[\"git\",\"git-rewrite-history\"],\"owner\":{\"reputation\":36098,\"user_id\":7473,\"user_type\":\"registered\",\"accept_rate\":61,\"profile_image\":\"https://www.gravatar.com/avatar/9218dd1115bc620ec1ea79fd0368da8e?s=128&d=identicon&r=PG\",\"display_name\":\"Laurie Young\",\"link\":\"http://stackoverflow.com/users/7473/laurie-young\"},\"is_answered\":true,\"view_count\":802041,\"protected_date\":1364934455,\"accepted_answer_id\":179147,\"answer_count\":22,\"score\":5410,\"last_activity_date\":1402510903,\"creation_date\":1223394287,\"last_edit_date\":1400106432,\"question_id\":179123,\"link\":\"http://stackoverflow.com/questions/179123/edit-an-incorrect-commit-message-in-git\",\"title\":\"Edit an incorrect commit message in Git\",\"body\":\"<p>I wrote the wrong thing in a commit message.</p>\\n\\n<p>How do I change the message? <strong>I have not yet pushed the commit to anyone</strong>.</p>\\n\"},{\"tags\":[\"git\"],\"owner\":{\"reputation\":21052,\"user_id\":89904,\"user_type\":\"registered\",\"accept_rate\":66,\"profile_image\":\"https://www.gravatar.com/avatar/4fef65cead13e5d519f6bce3c501a537?s=128&d=identicon&r=PG\",\"display_name\":\"Hamza Yerlikaya\",\"link\":\"http://stackoverflow.com/users/89904/hamza-yerlikaya\"},\"is_answered\":true,\"view_count\":1296110,\"protected_date\":1370840488,\"accepted_answer_id\":927386,\"answer_count\":25,\"community_owned_date\":1363428511,\"score\":4734,\"last_activity_date\":1404049206,\"creation_date\":1243620554,\"last_edit_date\":1402457759,\"question_id\":927358,\"link\":\"http://stackoverflow.com/questions/927358/undo-the-last-git-commit\",\"title\":\"Undo the last Git commit?\",\"body\":\"<p>I accidentally added the wrong directory containing my files in <a href=\\\"http://en.wikipedia.org/wiki/Git_%28software%29\\\">Git</a>. Instead of adding a <code>.java</code> file, I added the directory containing the <code>.class</code> file.</p>\\n\\n<p>How can I undo this action?</p>\\n\"},{\"tags\":[\"json\",\"content-type\"],\"owner\":{\"reputation\":64112,\"user_id\":12870,\"user_type\":\"registered\",\"accept_rate\":68,\"profile_image\":\"https://www.gravatar.com/avatar/f0af40756420859b5b63cbceb6d30505?s=128&d=identicon&r=PG\",\"display_name\":\"Oli\",\"link\":\"http://stackoverflow.com/users/12870/oli\"},\"is_answered\":true,\"view_count\":773433,\"protected_date\":1299606399,\"accepted_answer_id\":477819,\"answer_count\":24,\"score\":4389,\"last_activity_date\":1404147386,\"creation_date\":1232897119,\"last_edit_date\":1373490684,\"question_id\":477816,\"link\":\"http://stackoverflow.com/questions/477816/what-is-the-correct-json-content-type\",\"title\":\"What is the correct JSON content type?\",\"body\":\"<p>I've been messing around with <a href=\\\"http://en.wikipedia.org/wiki/JSON\\\">JSON</a> for some time, just pushing it out as text and it hasn't hurt anybody (that I know of), but I'd like to start doing things properly.</p>\\n\\n<p>I have seen <em>so</em> many purported \\\"standards\\\" for the JSON content type:</p>\\n\\n<pre><code>application/json\\napplication/x-javascript\\ntext/javascript\\ntext/x-javascript\\ntext/x-json\\n</code></pre>\\n\\n<p>But which is correct, or best? I gather that there are security and browser support issues varying between them.</p>\\n\\n<p>I know there's a similar question, <em><a href=\\\"http://stackoverflow.com/questions/404470/what-mime-type-if-json-is-being-returned-by-a-rest-api\\\">What MIME type if JSON is being returned by a REST API?</a></em>, but I'd like a slightly more targeted answer.</p>\\n\"},{\"tags\":[\"c++\",\"c++-faq\"],\"owner\":{\"reputation\":3403,\"user_id\":14388,\"user_type\":\"registered\",\"profile_image\":\"https://www.gravatar.com/avatar/1b71e4241b4eaed933a9f666fcdefada?s=128&d=identicon&r=PG\",\"display_name\":\"grepsedawk\",\"link\":\"http://stackoverflow.com/users/14388/grepsedawk\"},\"is_answered\":true,\"view_count\":682588,\"protected_date\":1334596214,\"answer_count\":1,\"community_owned_date\":1230009836,\"score\":4281,\"locked_date\":1395315984,\"last_activity_date\":1402005805,\"creation_date\":1230009836,\"last_edit_date\":1395315967,\"question_id\":388242,\"link\":\"http://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list\",\"title\":\"The Definitive C++ Book Guide and List\",\"body\":\"<p>This question attempts to collect the few pearls among the dozens of bad C++ books that are published every year.</p>\\n\\n<p>Unlike many other programming languages, which are often picked up on the go from tutorials found on the Internet, few are able to quickly pick up C++ without studying a well-written C++ book. It is way too big and complex for doing this. In fact, it is so big and complex, that <strong><em>there are very many very bad C++ books</em></strong> out there. And we are not talking about bad style, but things like sporting <em>glaringly obvious factual errors</em> and <em>promoting abysmally bad programming styles</em>.</p>\\n\\n<p>Please edit the accepted answer to provide <strong>quality books</strong> and an approximate skill level â <em>preferably</em> <strong>after</strong> <em>discussing your addition in <a href=\\\"http://chat.stackoverflow.com/rooms/10/loungec\\\">the C++ chat room</a></em>. (The regulars might mercilessly undo your work if they disagree with a recommendation.) Add a short blurb/description about each book that you have personally read/benefited from. Feel free to debate quality, headings, etc. Books that meet the criteria will be added to the list.  Books that have reviews by the Association of C and C++ Users (ACCU) have links to the review. </p>\\n\\n<p><sub><em>Note: FAQs and other resources can be found in the <a href=\\\"http://stackoverflow.com/tags/c%2b%2b/info\\\">C++ tag info</a> and under <a href=\\\"/questions/tagged/c%2b%2b-faq\\\" class=\\\"post-tag\\\" title=\\\"show questions tagged &#39;c++-faq&#39;\\\" rel=\\\"tag\\\">c++-faq</a>. There is also a similar post for C: <a href=\\\"http://stackoverflow.com/questions/562303/the-definitive-c-book-guide-and-list\\\">The Definitive C Book Guide and List</a></em></sub></p>\\n\"},{\"tags\":[\"git\",\"github\",\"git-branch\"],\"owner\":{\"reputation\":67567,\"user_id\":95592,\"user_type\":\"registered\",\"accept_rate\":78,\"profile_image\":\"http://i.stack.imgur.com/utY5u.jpg?s=128&g=1\",\"display_name\":\"Matthew Rankin\",\"link\":\"http://stackoverflow.com/users/95592/matthew-rankin\"},\"is_answered\":true,\"view_count\":1118899,\"protected_date\":1358718496,\"accepted_answer_id\":2003515,\"answer_count\":13,\"score\":3267,\"last_activity_date\":1402514129,\"creation_date\":1262653935,\"last_edit_date\":1402500160,\"question_id\":2003505,\"link\":\"http://stackoverflow.com/questions/2003505/how-to-delete-a-git-branch-both-locally-and-remotely\",\"title\":\"How to delete a Git branch both locally and remotely?\",\"body\":\"<p>I want to delete a branch both locally and on my remote project fork on GitHub.</p>\\n\\n<h3>Successfully Deleted Local Branch</h3>\\n\\n<pre><code>$ git branch -D bugfix\\nDeleted branch bugfix (was 2a14ef7).\\n</code></pre>\\n\\n<h3>Attempts to Delete Remote Branch</h3>\\n\\n<pre><code>$ git branch -d remotes/origin/bugfix\\nerror: branch 'remotes/origin/bugfix' not found.\\n\\n$ git branch -d origin/bugfix\\nerror: branch 'origin/bugfix' not found.\\n\\n$ git branch -rd origin/bugfix\\nDeleted remote branch origin/bugfix (was 2a14ef7).\\n\\n$ git push\\nEverything up-to-date\\n\\n$ git pull\\nFrom github.com:gituser/gitproject\\n* [new branch] bugfix -&gt; origin/bugfix\\nAlready up-to-date.\\n</code></pre>\\n\\n<p>What do I need to do differently to successfully delete the\\n<code>remotes/origin/bugfix</code> branch both locally and on GitHub?</p>\\n\"},{\"tags\":[\"c++\",\"c\",\"operators\",\"standards-compliance\"],\"owner\":{\"reputation\":153171,\"user_id\":87234,\"user_type\":\"registered\",\"accept_rate\":94,\"profile_image\":\"http://i.stack.imgur.com/FkjBe.png?s=128&g=1\",\"display_name\":\"GManNickG\",\"link\":\"http://stackoverflow.com/users/87234/gmannickg\"},\"is_answered\":true,\"view_count\":218050,\"protected_date\":1297320482,\"accepted_answer_id\":1642035,\"answer_count\":17,\"community_owned_date\":1262233068,\"score\":3207,\"last_activity_date\":1401157866,\"creation_date\":1256799465,\"last_edit_date\":1396576790,\"question_id\":1642028,\"link\":\"http://stackoverflow.com/questions/1642028/what-is-the-name-of-this-operator\",\"title\":\"What is the name of this operator: &quot;--&gt;&quot;?\",\"body\":\"<p>After reading <a href=\\\"http://groups.google.com/group/comp.lang.c++.moderated/msg/33f173780d58dd20\\\">Hidden Features and Dark Corners of C++/STL</a> on comp.lang.c++.moderated, I was completely surprised that it compiled and worked in both Visual Studio 2008 and G++ 4.4.</p>\\n\\n<p>The code:</p>\\n\\n<pre><code>#include &lt;stdio.h&gt;\\nint main()\\n{\\n     int x = 10;\\n     while( x --&gt; 0 ) // x goes to 0\\n     {\\n       printf(\\\"%d \\\", x);\\n     }\\n}\\n</code></pre>\\n\\n<p>I'd assume this is C, since it works in GCC as well. \\nWhere is this defined in the standard, and where has it come from?</p>\\n\"},{\"tags\":[\"git\"],\"owner\":{\"reputation\":44909,\"user_id\":6068,\"user_type\":\"registered\",\"accept_rate\":80,\"profile_image\":\"https://www.gravatar.com/avatar/931970b8dc51b72e05e3a12b88612d61?s=128&d=identicon&r=PG\",\"display_name\":\"Pablo\",\"link\":\"http://stackoverflow.com/users/6068/pablo\"},\"is_answered\":true,\"view_count\":647163,\"protected_date\":1362879044,\"accepted_answer_id\":292359,\"answer_count\":17,\"score\":3106,\"last_activity_date\":1403555561,\"creation_date\":1226742669,\"last_edit_date\":1403555561,\"question_id\":292357,\"link\":\"http://stackoverflow.com/questions/292357/difference-between-git-pull-and-git-fetch\",\"title\":\"Difference between &#39;git pull&#39; and &#39;git fetch&#39;?\",\"body\":\"<p>What's the difference between <code>git pull</code> and <code>git fetch</code> in Git?</p>\\n\"},{\"tags\":[\"memory-management\",\"stack\",\"heap\"],\"owner\":{\"reputation\":14751,\"user_id\":13161,\"user_type\":\"registered\",\"profile_image\":\"https://www.gravatar.com/avatar/e3dcbde38b1f70c77b1db642f31a223d?s=128&d=identicon&r=PG\",\"display_name\":\"mattshane\",\"link\":\"http://stackoverflow.com/users/13161/mattshane\"},\"is_answered\":true,\"view_count\":467953,\"protected_date\":1315942395,\"accepted_answer_id\":80113,\"answer_count\":17,\"score\":2946,\"last_activity_date\":1402547286,\"creation_date\":1221625086,\"last_edit_date\":1369951943,\"question_id\":79923,\"link\":\"http://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap\",\"title\":\"What and where are the stack and heap?\",\"body\":\"<p>Programming language books usually explain that value types are created on the stack, and reference types are created on the heap, without really explaining what these two things are.  With my only programming experience being in high level languages, I haven't read a clear explanation of this.  I mean I understand what <em>a stack</em> is, but where and what are they (relative to the physical memory of a real computer)?  </p>\\n\\n<ul>\\n<li>To what extent are they controlled by the OS or language runtime?</li>\\n<li>What is their scope?</li>\\n<li>What determines the size of each of them?</li>\\n<li>What makes one faster? </li>\\n</ul>\\n\"},{\"tags\":[\"javascript\",\"jquery\",\"angularjs\"],\"owner\":{\"reputation\":80954,\"user_id\":215945,\"user_type\":\"registered\",\"accept_rate\":100,\"profile_image\":\"http://i.stack.imgur.com/OyEsC.png?s=128&g=1\",\"display_name\":\"Mark Rajcok\",\"link\":\"http://stackoverflow.com/users/215945/mark-rajcok\"},\"is_answered\":true,\"view_count\":320846,\"protected_date\":1363756301,\"accepted_answer_id\":15012542,\"answer_count\":13,\"score\":2922,\"last_activity_date\":1403646018,\"creation_date\":1361419796,\"last_edit_date\":1388759192,\"question_id\":14994391,\"link\":\"http://stackoverflow.com/questions/14994391/how-do-i-think-in-angularjs-if-i-have-a-jquery-background\",\"title\":\"How do I &quot;think in AngularJS&quot; if I have a jQuery background?\",\"body\":\"<p><strong>How do I âthink in <a href=\\\"http://angularjs.org/\\\">AngularJS</a>â if I have a <a href=\\\"http://jquery.com/\\\">jQuery</a> background?</strong></p>\\n\\n<p>Suppose I'm familiar with developing <em>client-side applications</em> in jQuery, but now I'd like to start using AngularJS. Can you describe the paradigm shift that is necessary ? Here are a few questions that might help you frame an answer:</p>\\n\\n<ul>\\n<li>How do I architect and design <em>client-side web applications</em> differently? What is the biggest difference?</li>\\n<li>What should I stop doing/using; what should I start doing/using instead?</li>\\n<li>Are there any server-side considerations/restrictions?</li>\\n</ul>\\n\\n<p>I'm not looking for a detailed comparison between jQuery and AngularJS.</p>\\n\"},{\"tags\":[\"javascript\",\"closures\"],\"owner\":{\"reputation\":145166,\"user_id\":9951,\"user_type\":\"registered\",\"accept_rate\":79,\"profile_image\":\"https://www.gravatar.com/avatar/d48823dc173e34714830a841fe7c6b0f?s=128&d=identicon&r=PG\",\"display_name\":\"e-satis\",\"link\":\"http://stackoverflow.com/users/9951/e-satis\"},\"is_answered\":true,\"view_count\":429269,\"protected_date\":1316450131,\"accepted_answer_id\":111200,\"answer_count\":47,\"community_owned_date\":1370514175,\"score\":2840,\"last_activity_date\":1402327598,\"creation_date\":1222006327,\"last_edit_date\":1401810463,\"question_id\":111102,\"link\":\"http://stackoverflow.com/questions/111102/how-do-javascript-closures-work\",\"title\":\"How do JavaScript closures work?\",\"body\":\"<p>How would you explain closures to someone with a knowledge of the concepts which make up closures (e.g. functions, variables and the like), but does not understand closures themselves?</p>\\n\\n<p>I have seen the <a href=\\\"http://en.wikipedia.org/wiki/Scheme_%28programming_language%29\\\">Scheme</a> example given in Stack Overflow, and it did not help.</p>\\n\\n<p>Articles linked in post</p>\\n\\n<ol>\\n<li><a href=\\\"http://en.wikipedia.org/wiki/Closure_%28computer_science%29\\\">Wikipedia Closures</a></li>\\n<li><a href=\\\"http://goo.gl/1tyMog\\\">Closures and its effects in loops</a></li>\\n<li><a href=\\\"http://nathansjslessons.appspot.com/\\\">What is closures</a></li>\\n<li><a href=\\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures\\\">MDN Closures</a></li>\\n<li><a href=\\\"http://javascriptissexy.com/understand-javascript-closures-with-ease/\\\">Understand Closures</a></li>\\n<li><a href=\\\"http://web.archive.org/web/20070510000404/http://laurens.vd.oever.nl/weblog/items2005/closures/\\\">Leak free Closures</a></li>\\n</ol>\\n\"}],\"has_more\":true,\"quota_max\":10000,\"quota_remaining\":9753}"},"http_version":null},"recorded_at":"Thu, 31 Dec 2009 13:00:03 GMT"},{"request":{"method":"get","uri":"https://api.stackexchange.com/2.0/answers/11227902?filter=withbody&key=<STACKAPPS_API_KEY>&site=stackoverflow","body":{"encoding":"US-ASCII","string":""},"headers":{"Accept-Encoding":["gzip;q=1.0,deflate;q=0.6,identity;q=0.3"],"Accept":["*/*"],"User-Agent":["Ruby"]}},"response":{"status":{"code":200,"message":"OK"},"headers":{"Cache-Control":["private"],"Content-Type":["application/json; charset=utf-8"],"Access-Control-Allow-Origin":["*"],"Access-Control-Allow-Methods":["GET, POST"],"Access-Control-Allow-Credentials":["false"],"Date":["Thu, 03 Jul 2014 13:31:40 GMT"],"Content-Length":["3329"]},"body":{"encoding":"ASCII-8BIT","string":"ï»¿{\"items\":[{\"owner\":{\"reputation\":163560,\"user_id\":922184,\"user_type\":\"registered\",\"profile_image\":\"http://i.stack.imgur.com/Wv6qh.jpg?s=128&g=1\",\"display_name\":\"Mysticial\",\"link\":\"http://stackoverflow.com/users/922184/mysticial\"},\"is_accepted\":true,\"score\":12325,\"last_activity_date\":1395003281,\"last_edit_date\":1395003281,\"creation_date\":1340805402,\"answer_id\":11227902,\"question_id\":11227809,\"body\":\"<p><strong>You are the victim of <a href=\\\"//en.wikipedia.org/wiki/Branch_predictor\\\">branch prediction</a> fail.</strong></p>\\n\\n<hr>\\n\\n<h2>What is Branch Prediction?</h2>\\n\\n<p>Consider a railroad junction:</p>\\n\\n<p><a href=\\\"//commons.wikimedia.org/wiki/File%3aEntroncamento_do_Transpraia.JPG\\\"><img src=\\\"//i.stack.imgur.com/muxnt.jpg\\\" alt=\\\"\\\"></a>\\n<sub><a href=\\\"//commons.wikimedia.org/wiki/File%3aEntroncamento_do_Transpraia.JPG\\\">Image</a> by Mecanismo, via Wikimedia Commons. Used under the <a href=\\\"//creativecommons.org/licenses/by-sa/3.0/deed.en\\\">CC-By-SA 3.0</a> license.</sub></p>\\n\\n<p>Now for the sake of argument, suppose this is back in the 1800s - before long distance or radio communication.</p>\\n\\n<p>You are the operator of a junction and you hear a train coming. You have no idea which way it will go. You stop the train to ask the captain which direction he wants. And then you set the switch appropriately.</p>\\n\\n<p><em>Trains are heavy and have a lot of inertia. So they take forever to start up and slow down.</em></p>\\n\\n<p>Is there a better way? You guess which direction the train will go!</p>\\n\\n<ul>\\n<li>If you guessed right, it continues on.</li>\\n<li>If you guessed wrong, the captain will stop, back up, and yell at you to flip the switch. Then it can restart down the other path.</li>\\n</ul>\\n\\n<p><strong>If you guess right every time</strong>, the train will never have to stop.<br>\\n<strong>If you guess wrong too often</strong>, the train will spend a lot of time stopping, backing up, and restarting.</p>\\n\\n<hr>\\n\\n<p><strong>Consider an if-statement:</strong> At the processor level, it is a branch instruction:</p>\\n\\n<p><img src=\\\"//i.stack.imgur.com/pyfwC.png\\\" alt=\\\"enter image description here\\\"></p>\\n\\n<p>You are a processor and you see a branch. You have no idea which way it will go. What do you do? You halt execution and wait until the previous instructions are complete. Then you continue down the correct path.</p>\\n\\n<p><em>Modern processors are complicated and have long pipelines. So they take forever to \\\"warm up\\\" and \\\"slow down\\\".</em></p>\\n\\n<p>Is there a better way? You guess which direction the branch will go!</p>\\n\\n<ul>\\n<li>If you guessed right, you continue executing.</li>\\n<li>If you guessed wrong, you need to flush the pipeline and roll back to the branch. Then you can restart down the other path.</li>\\n</ul>\\n\\n<p><strong>If you guess right every time</strong>, the execution will never have to stop.<br>\\n<strong>If you guess wrong too often</strong>, you spend a lot of time stalling, rolling back, and restarting.</p>\\n\\n<hr>\\n\\n<p>This is branch prediction. I admit it's not the best analogy since the train could just signal the direction with a flag. But in computers, the processor doesn't know which direction a branch will go until the last moment.</p>\\n\\n<p>So how would you strategically guess to minimize the number of times that the train must back up and go down the other path? You look at the past history! If the train goes left 99% of the time, then you guess left. If it alternates, then you alternate your guesses. If it goes one way every 3 times, you guess the same...</p>\\n\\n<p><em><strong>In other words, you try to identify a pattern and follow it.</em></strong> This is more or less how branch predictors work.</p>\\n\\n<p>Most applications have well-behaved branches. So modern branch predictors will typically achieve >90% hit rates. But when faced with unpredictable branches with no recognizable patterns, branch predictors are virtually useless.</p>\\n\\n<p>Further reading: <a href=\\\"//en.wikipedia.org/wiki/Branch_predictor\\\">\\\"Branch predictor\\\" article on Wikipedia</a>.</p>\\n\\n<hr>\\n\\n<h2>As hinted from above, the culprit is this if-statement:</h2>\\n\\n<pre><code>if (data[c] &gt;= 128)\\n    sum += data[c];\\n</code></pre>\\n\\n<p>Notice that the data is evenly distributed between 0 and 255. \\nWhen the data is sorted, roughly the first half of the iterations will not enter the if-statement. After that, they will all enter the if-statement.</p>\\n\\n<p>This is very friendly to the branch predictor since the branch consecutively goes the same direction many times.\\nEven a simple saturating counter will correctly predict the branch except for the few iterations after it switches direction.</p>\\n\\n<p><strong>Quick visualization:</strong></p>\\n\\n<pre><code>T = branch taken\\nN = branch not taken\\n\\ndata[] = 0, 1, 2, 3, 4, ... 126, 127, 128, 129, 130, ... 250, 251, 252, ...\\nbranch = N  N  N  N  N  ...   N    N    T    T    T  ...   T    T    T  ...\\n\\n       = NNNNNNNNNNNN ... NNNNNNNTTTTTTTTT ... TTTTTTTTTT  (easy to predict)\\n</code></pre>\\n\\n<p>However, when the data is completely random, the branch predictor is rendered useless because it can't predict random data.\\nThus there will probably be around 50% misprediction. (no better than random guessing)</p>\\n\\n<pre><code>data[] = 226, 185, 125, 158, 198, 144, 217, 79, 202, 118,  14, 150, 177, 182, 133, ...\\nbranch =   T,   T,   N,   T,   T,   T,   T,  N,   T,   N,   N,   T,   T,   T,   N  ...\\n\\n       = TTNTTTTNTNNTTTN ...   (completely random - hard to predict)\\n</code></pre>\\n\\n<hr>\\n\\n<p><strong>So what can be done?</strong></p>\\n\\n<p>If the compiler isn't able to optimize the branch into a conditional move, you can try some hacks if you are willing to sacrifice readability for performance.</p>\\n\\n<p>Replace:</p>\\n\\n<pre><code>if (data[c] &gt;= 128)\\n    sum += data[c];\\n</code></pre>\\n\\n<p>with:</p>\\n\\n<pre><code>int t = (data[c] - 128) &gt;&gt; 31;\\nsum += ~t &amp; data[c];\\n</code></pre>\\n\\n<p>This eliminates the branch and replaces it with some bitwise operations.</p>\\n\\n<p><sub>(Note that this hack is not strictly equivalent to the original if-statement. But in this case, it's valid for all the input values of <code>data[]</code>.)</sub></p>\\n\\n<p><strong>Benchmarks: Core i7 920 @ 3.5 GHz</strong></p>\\n\\n<p>C++ - Visual Studio 2010 - x64 Release</p>\\n\\n<pre><code>//  Branch - Random\\nseconds = 11.777\\n\\n//  Branch - Sorted\\nseconds = 2.352\\n\\n//  Branchless - Random\\nseconds = 2.564\\n\\n//  Branchless - Sorted\\nseconds = 2.587\\n</code></pre>\\n\\n<p>Java - Netbeans 7.1.1 JDK 7 - x64</p>\\n\\n<pre><code>//  Branch - Random\\nseconds = 10.93293813\\n\\n//  Branch - Sorted\\nseconds = 5.643797077\\n\\n//  Branchless - Random\\nseconds = 3.113581453\\n\\n//  Branchless - Sorted\\nseconds = 3.186068823\\n</code></pre>\\n\\n<p>Observations:</p>\\n\\n<ul>\\n<li><strong>With the Branch:</strong> There is a huge difference between the sorted and unsorted data.</li>\\n<li><strong>With the Hack:</strong> There is no difference between sorted and unsorted data.</li>\\n<li>In the C++ case, the hack is actually a tad slower than with the branch when the data is sorted.</li>\\n</ul>\\n\\n<p>A general rule of thumb is to avoid data-dependent branching in critical loops. (such as in this example)</p>\\n\\n<hr>\\n\\n<p><strong>Update :</strong></p>\\n\\n<ul>\\n<li><p>GCC 4.6.1 with <code>-O3</code> or <code>-ftree-vectorize</code> on x64 is able to generate a conditional move. So there is no difference between the sorted and unsorted data - both are fast.</p></li>\\n<li><p>VC++ 2010 is unable to generate conditional moves for this branch even under <code>/Ox</code>.</p></li>\\n<li><p>Intel Compiler 11 does something miraculous. It <a href=\\\"//en.wikipedia.org/wiki/Loop_interchange\\\">interchanges the two loops</a>, thereby hoisting the unpredictable branch to the outer loop. So not only is it immune the mispredictions, it is also twice as fast as whatever VC++ and GCC can generate! In other words, ICC took advantage of the test-loop to defeat the benchmark...</p></li>\\n<li><p>If you give the Intel Compiler the branchless code, it just out-right vectorizes it... and is just as fast as with the branch (with the loop interchange).</p></li>\\n</ul>\\n\\n<p>This goes to show that even mature modern compilers can vary wildly in their ability to optimize code...</p>\\n\"}],\"has_more\":false,\"quota_max\":10000,\"quota_remaining\":9752}"},"http_version":null},"recorded_at":"Thu, 31 Dec 2009 13:00:04 GMT"}],"recorded_with":"VCR 2.9.2"}